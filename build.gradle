plugins {
    id 'java'
//    id 'org.springframework.boot' version '3.2.0'
    id 'org.springframework.boot' version '3.1.6'
    id 'io.spring.dependency-management' version '1.1.4'

    id 'checkstyle'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    graphqlJavaKickstartVersion = "15.1.0"
    graphqlJavaExtendedScalars = "21.0"

    postgresqlVersion = "42.6.0"

//    mybatisVersion = "3.0.1"

    lombokVersion = "1.18.30"

    mapstructVersion = "1.5.3.Final"

    hibernateValidatorVersion = "8.0.0.Final"
    jakartaValidatorVersion = "3.0.2"

    jjwtVeersion = "0.11.5"
    // jjwtVeersion = "0.12.0" - Switch to it in the future

    liquibaseVersion = "4.25.0"
    preliquibaseVersion = "1.4.0"

    springdocVersion = "2.3.0"

    minioVersion = "8.5.7"

    xnlFormaterVersion = "3.2.2"
    checkstyleVersion = "3.2.2"

    mocitoCoreVersion = "5.8.0"
    junitJupiterApiVersion = "5.10.1"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springframework.boot:spring-boot-starter-security"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'

    implementation "com.graphql-java-kickstart:graphql-java-servlet:${graphqlJavaKickstartVersion}"
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalars}"

    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

//    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    //  lombok нужно вставлять выше, чтобы mapstruct видел setter, getter
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidatorVersion}"

    implementation "io.jsonwebtoken:jjwt-api:${jjwtVeersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-api:${jjwtVeersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-api:${jjwtVeersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVeersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVeersion}"

    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"
    implementation "net.lbruun.springboot:preliquibase-spring-boot-starter:${preliquibaseVersion}"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    implementation "io.minio:minio:${minioVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.mockito:mockito-core:${mocitoCoreVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterApiVersion}"
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    showViolations = true
    ignoreFailures = false
}

jacoco {
    toolVersion = "0.8.9"
}

check {
    dependsOn jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            includes = ['com.example.tasklist.services.impl']
            element = "PACKAGE"
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml
        html
    }
}

bootJar {
    layered {
        enabled = true
    }
}